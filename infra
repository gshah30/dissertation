#!/bin/ruby -W0
require "logger"
require "csv"
require "etc"
require "set"
require "colorize"

START_TIME = Time.now
PSEUDO_MIN = 100

$logger = Logger.new STDOUT
$logger.level = Logger::DEBUG
$logger.formatter = proc {|severity, datetime, progname, msg| "#{severity}: #{progname}: #{msg}\n" }

def exit_gracefully status = 0
  exit status
rescue SystemExit => e
  $logger.info(__method__) { "Time taken: #{Time.now - START_TIME}".blue }
  raise e
end

module Infra
  OUTPUT_FORMAT = "png".freeze

  module_function

  def get_files_names type
    raise ArgumentError.new "Expected file type :png or :asy. Got #{type}" unless [:png, :asy].include? type
    Dir.glob("*.#{type}").filter_map {|f| f[0..-(type.to_s.length+2)] unless f.include? "setup"}
  end

  def get_file_modification_times type
    raise ArgumentError.new "Expected file type :png or :asy. Got #{type}" unless [:png, :asy].include? type
    Dir.glob("*.#{type}").filter_map {|f| [f[0..-(type.to_s.length+2)].to_sym, File.mtime(f).to_i]  unless f.include? "setup"}.to_h
  end

  def get_dependency_map
    dependency_map = {
      "setup" => []
    }

    type = "asy"

    Dir.glob("*.#{type}").each do |f|
      File.readlines(f).each do |l|
        break unless l.include? "import "

        dependency_map.keys.each do |d|
          if l.include? d
            dependency_map[d] << f[0..-(type.length+2)]
          end
        end
      end
    end

    dependency_map
  end

  def get_build_meta
    asy_files = get_file_modification_times :asy
    png_files = get_file_modification_times :png

    (png_files.keys - asy_files.keys).tap do |missing_asy_files|
      $logger.warn(__method__) { "asy files missing, but their png's present: #{missing_asy_files}".yellow } if missing_asy_files.count > 0

      missing_asy_files.each do |missing_asy_file|
        png_files.delete missing_asy_file
      end
    end

    # for all dependencies, if dependency asy was modified after dependent png, then set dependent asy modification time to now
    get_dependency_map.each do |d,fs|
      fs.each do |f|
        if File.exist?("#{f}.png") && File.mtime("#{f}.png") < File.mtime("#{d}.asy")
          asy_files[f.to_sym] = Time.now.to_i
        end
      end
    end

    files_to_build = asy_files.merge(png_files) {|k, ov, nv| ov - nv }.filter_map {|k, v| k if v > 0 }

    [files_to_build, files_to_build.count == asy_files.count]
  end

  def convert_cmd file_name
    "convert #{file_name}.#{OUTPUT_FORMAT} -gravity center -background white -extent 600x600 -colorspace Gray #{file_name}.png 2>&1"
  end

  def run_and_forget command
    pid = spawn command
    Process.detach pid
  end

  def run command
    output = `#{command}`
    [output, $?.exitstatus]
  end

  def build sources = nil
    files_to_build, is_full_build = sources.nil? || sources.empty? ? get_build_meta : [sources, false]

    if is_full_build
      $logger.info(__method__) { "Building images" }
      unless system "asy #{files_to_build.join(".asy ")}.asy -f #{OUTPUT_FORMAT}"
        $logger.error(__method__) { "Error while building asymptote file".red }
        exit_gracefully 1
      end

      $logger.info(__method__) { "Generating png files" }
      get_files_names(:asy).each {|f| `#{convert_cmd(f)}` }
    else
      if files_to_build.empty?
        $logger.warn(__method__) { "All files already built. Nothing to build!".yellow }
        exit_gracefully
      end

      files_to_build.each do |f|
        $logger.info(__method__) { "Building #{f}.asy" }

        unless system "asy #{f}.asy -f #{OUTPUT_FORMAT}"
          $logger.error(__method__) { "Error while building asymptote file #{f}".red }
          exit_gracefully 1
        end
        `#{convert_cmd f}`
      end
    end
  end

  def pbuild sources = nil
    files_to_build, is_full_build = sources.nil? || sources.empty? ? get_build_meta : [sources.map{|s| s.delete(".").strip }, false]

    if files_to_build.empty?
      $logger.warn(__method__) { "All files already built. Nothing to build!".yellow }
      exit_gracefully
    end

    actors = files_to_build.group_by.with_index{|_,i| i % Etc.nprocessors}.map do |id, batch|
      $logger.info(__method__) { "Processing batch: Id => #{id}; Size => #{batch.size}" }

      Ractor.new(id, batch, Infra) do |id, batch, infra|
        compile_output, status = infra.run "asy #{batch.join(".asy ")}.asy -f #{infra::OUTPUT_FORMAT} 2>&1"
        Ractor.yield({type: :error, id: id, batch: batch, compile_output: compile_output}) unless status == 0

        cumulative_convert_output = ""
        batch.each do |f|
          convert_output, status = infra.run infra.convert_cmd(f)
          cumulative_convert_output += convert_output

          Ractor.yield({type: :error, id: id, batch: batch, convert_output: convert_output}) unless status == 0
        end if status == 0

        {type: :info, id: id, message: "success", compile_output: compile_output, convert_output: cumulative_convert_output}
      end
    end

    while !actors.empty?
      a, result = Ractor.select *actors
      actors.delete a

      if result[:type] == :error
        $logger.error result.to_s.red
      else
        $logger.info result
      end
    end

    # $logger.info(__method__) { "Removing eps files." }
    # run_and_forget "rm *.eps"
  end

  def rebuild
    clean
    build
  end

  def prebuild
    clean
    pbuild
  end

  def clean
    $logger.info(__method__) { "Cleaning..." }

    if `rm *.png 2>&1`.include? "No such file or directory"
      $logger.warn(__method__) { "Nothing to clean!".yellow }
    else
      $logger.info(__method__) { "Removed all png files".green }
    end
  end

  def dry_inspect range = nil
    inspect range, true
  end

  def inspect range = nil, is_dry = false
    missing_images = []
    missing_images_message = proc do |missing_images|
      if missing_images.count > 0
        missing_image_line_nos = missing_images.map(&:first)
        "Following #{missing_image_line_nos.count} images were not found: #{missing_image_line_nos}".red
      else
        "All images present!".green
      end
    end

    File.open "./statements.tsv" do |f|
      CSV.parse(f, col_sep: "\t").each_with_index do |r, i|

        if range.nil? || range === i
          if r.length != 2 && !r&.[](0)&.start_with?("#")
            missing_images << [i+1, nil]
            # $logger.error(__method__) {missing_images_message.call missing_images}

            # exit_gracefully 1
          else
            $logger.info(__method__) { "#{i+1} => #{r.first}" }

            if `ls #{r.last}.png 2>&1`.include? "No such file or directory"
              missing_images << [i+1, r.last]
            else
              `feh #{r.last}.png --image-bg white 2>&1` unless is_dry
            end
          end
        end

      end
    end

    $logger.error(__method__) {missing_images_message.call(missing_images)}
  end

  def view images
    images.each do |image|
      image = image.delete(".").strip

      $logger.info(__method__) { "Displaying image: #{image}.png" }
      run "feh #{image}.png --image-bg white"
    end
  end

  def gen_clean_data
    missing_images = []
    missing_images_message = proc do |missing_images|
      if missing_images.count > 0
        "#{missing_images.size} images were not found!".red
      else
        "All images present!".green
      end
    end

    written_count = 0

    File.open "./statements.tsv" do |f|
      CSV.parse(f, col_sep: "\t").each_with_index do |r, i|

        if r.length != 2
          missing_images << [i+1, nil]
          next
        else
          if `ls #{r.last}.png 2>&1`.include? "No such file or directory"
            missing_images << [i+1, r.last]
          else
            written_count += 1
            File.write("data.tsv.new", "#{r[0]}\t#{r[1]}\n", mode: "a")
          end
        end
      end
    end

    $logger.error(__method__) {missing_images_message.call(missing_images)}
    $logger.info(__method__) {"Examples written: #{written_count}"}

    File.rename "data.tsv", "data.tsv.bak" if File.exist? "data.tsv"
    File.rename "data.tsv.new", "data.tsv"
  end

  def stats
    File.open "./statements.tsv" do |f|
      stats = CSV.parse(f, col_sep: "\t").reduce({max: 0, min: PSEUDO_MIN, sum: 0, count: 0, vocab: Set.new}) do |stats, r|
        stats.tap do |stats|
          if r.size > 1 && !r.first.nil?
            words = r.first[..-2].split(" ").flat_map{|w| w == " " ? nil : w}
            len = words.size

            stats[:min] = len if stats[:min] > len
            stats[:max] = len if stats[:max] < len
            stats[:sum] += len
            stats[:count] += 1

            stats[:vocab].merge words.map{|w| /[A-Z]+/.match(w) ? w : w.downcase}
          end
        end
      end

      stats[:avg] = stats[:sum]/stats[:count]

      stats[:vocab_size] = stats[:vocab].size
      $logger.info(__method__) {stats.except(:sum, :count, :vocab).to_s.green}
    end
  end

end

ALLOWED_ACTIONS = [:clean, :build, :rebuild, :inspect, :view, :dry_inspect, :pbuild, :prebuild, :gen_clean_data, :stats]

action = ARGV[0].to_sym
unless ALLOWED_ACTIONS.include? action
  $logger.error(__method__) { "Invalid action received. Allowed actions: #{ALLOWED_ACTIONS.join(", ")}".red }
  exit_gracefully 1
end

args = ARGV[1..]

if args.empty?
  Infra.send action
  exit_gracefully
end

if [:inspect, :dry_inspect].include? action
  if args.count > 2
    $logger.error(__method__) { "inspect action expects 2 arguments".red }
    exit_gracefully 1
  end

  args = args.count == 1 ? (args[0].to_i-1).. : (args[0].to_i-1)..(args[1].to_i-1)
end

Infra.send action, args
exit_gracefully